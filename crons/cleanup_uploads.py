"""Cleanup script to purge expired uploaded assets from local storage.

This module can be invoked manually or scheduled (e.g. cron) to remove
files under ``public/upload`` older than 30 days. It relies on the
filename format generated by :func:`services.storage.build_file_name`
(<timestamp in milliseconds>.ext). If the filename cannot be parsed, the
file's modification time is used as a fallback.
"""
from __future__ import annotations

import argparse
import logging
import os
import time
from dataclasses import dataclass
from typing import Iterable, List

from server.settings import UPLOAD_ROOT

MAX_AGE_DAYS = 30
MILLISECONDS = 1000
SECONDS_PER_DAY = 24 * 60 * 60

logger = logging.getLogger(__name__)


@dataclass
class RemovalRecord:
    path: str
    reason: str


def _iter_upload_files(root: str) -> Iterable[str]:
    for base, _dirs, files in os.walk(root):
        for name in files:
            yield os.path.join(base, name)


def _extract_created_ms(filename: str, stat_mtime: float) -> float:
    stem, _ = os.path.splitext(os.path.basename(filename))
    try:
        value = int(stem)
        if value > 10**12:
            return float(value)
        return float(value * MILLISECONDS)
    except ValueError:
        return stat_mtime * MILLISECONDS


def cleanup_uploads(root: str = UPLOAD_ROOT, max_age_days: int = MAX_AGE_DAYS) -> List[RemovalRecord]:
    cutoff_ms = (time.time() - max_age_days * SECONDS_PER_DAY) * MILLISECONDS
    removed: List[RemovalRecord] = []

    if not os.path.isdir(root):
        logger.info("Upload root '%s' does not exist; nothing to clean.", root)
        return removed

    for path in _iter_upload_files(root):
        try:
            stat = os.stat(path)
        except OSError as exc:
            logger.warning("Unable to stat %s: %s", path, exc)
            continue

        created_ms = _extract_created_ms(path, stat.st_mtime)
        if created_ms < cutoff_ms:
            try:
                os.remove(path)
                removed.append(RemovalRecord(path=path, reason="expired"))
                logger.debug("Removed expired upload: %s", path)
            except OSError as exc:
                logger.error("Failed to remove %s: %s", path, exc)

    # remove empty directories for tidiness
    for base, dirs, _files in os.walk(root, topdown=False):
        for directory in dirs:
            full_path = os.path.join(base, directory)
            try:
                if not os.listdir(full_path):
                    os.rmdir(full_path)
                    logger.debug("Removed empty directory: %s", full_path)
            except OSError:
                pass

    return removed


def main() -> None:
    parser = argparse.ArgumentParser(description="Clean up expired uploaded files.")
    parser.add_argument("--days", type=int, default=MAX_AGE_DAYS, help="Maximum age in days")
    parser.add_argument("--root", type=str, default=UPLOAD_ROOT, help="Upload root directory")
    parser.add_argument("--verbose", action="store_true", help="Enable verbose logging")
    args = parser.parse_args()

    logging.basicConfig(level=logging.DEBUG if args.verbose else logging.INFO,
                        format="%(asctime)s %(levelname)s %(message)s")

    removed = cleanup_uploads(root=args.root, max_age_days=args.days)
    logger.info("Removed %d expired files", len(removed))


if __name__ == "__main__":
    main()
